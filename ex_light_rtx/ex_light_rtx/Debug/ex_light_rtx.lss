
ex_light_rtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089c  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000804  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000087  00000000  00000000  00001a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	45 d0       	rcall	.+138    	; 0x134 <main>
  aa:	4a c0       	rjmp	.+148    	; 0x140 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:
}

void USART_Transmitter(unsigned char txData){

	while(!(UCSR1A & (1<<UDRE1)));		// 송신 버퍼가 빌때까지 대기
	UDR1 = txData;					// 버퍼에 데이터 채우기
  ae:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  b2:	83 e3       	ldi	r24, 0x33	; 51
  b4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  b8:	88 e9       	ldi	r24, 0x98	; 152
  ba:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  c4:	08 95       	ret

000000c6 <__vector_30>:
}

ISR(USART1_RX_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	
	// 수신 버퍼에서 읽어 온 데이터를 다시 송신
	if(UCSR1A & (1<<RXC1)){
  d8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  dc:	88 23       	and	r24, r24
  de:	24 f4       	brge	.+8      	; 0xe8 <__vector_30+0x22>
		rxData = UDR1;							// 수신버퍼 데이터를 변수에 저장
  e0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	if(rxData == '1'){	
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	81 33       	cpi	r24, 0x31	; 49
  ee:	31 f4       	brne	.+12     	; 0xfc <__vector_30+0x36>
		if(LED_P == 1){
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	19 f4       	brne	.+6      	; 0xfc <__vector_30+0x36>
			rxData = '0';
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	
	LED_P = 0x00;
  fc:	18 ba       	out	0x18, r1	; 24
	for(int i = 0; i < rxData-'0'; i++){
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	08 c0       	rjmp	.+16     	; 0x114 <__vector_30+0x4e>
		LED_P = LED_P << 1;
 104:	88 b3       	in	r24, 0x18	; 24
 106:	88 0f       	add	r24, r24
 108:	88 bb       	out	0x18, r24	; 24
		LED_P |= 1;
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	88 bb       	out	0x18, r24	; 24
			rxData = '0';
		}
	}
	
	LED_P = 0x00;
	for(int i = 0; i < rxData-'0'; i++){
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	c0 97       	sbiw	r24, 0x30	; 48
 11c:	28 17       	cp	r18, r24
 11e:	39 07       	cpc	r19, r25
 120:	8c f3       	brlt	.-30     	; 0x104 <__vector_30+0x3e>
		LED_P = LED_P << 1;
		LED_P |= 1;
	}
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main(void)
{
	LED_P = 0x00;
 134:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xff;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	87 bb       	out	0x17, r24	; 23
	
	USART_Init();
 13a:	b9 df       	rcall	.-142    	; 0xae <USART_Init>
	
	sei();
 13c:	78 94       	sei
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0xa>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
