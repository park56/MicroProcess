
ActiveTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800120  00800120  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b57  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000791  00000000  00000000  000021e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000572  00000000  00000000  00003037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000035a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	60 d0       	rcall	.+192    	; 0x184 <main>
  c4:	10 c1       	rjmp	.+544    	; 0x2e6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init_ADC>:
	result |= ((ADCH & 0x03) << 8);

	sei();									//- 인터럽트 허용

	return result;
}
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	00 90 21 01 	lds	r0, 0x0121	; 0x800121 <n>
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Init_ADC+0xe>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Init_ADC+0xa>
  da:	81 64       	ori	r24, 0x41	; 65
  dc:	87 b9       	out	0x07, r24	; 7
  de:	87 e8       	ldi	r24, 0x87	; 135
  e0:	86 b9       	out	0x06, r24	; 6
  e2:	08 95       	ret

000000e4 <test1>:

// test1
void test1(){
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	a0 97       	sbiw	r28, 0x20	; 32
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
	
	int FND_NUM[8] = {0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F};
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	de 01       	movw	r26, r28
 100:	11 96       	adiw	r26, 0x01	; 1
 102:	01 90       	ld	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	8a 95       	dec	r24
 108:	e1 f7       	brne	.-8      	; 0x102 <test1+0x1e>
	int realnum[8] = {0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	e0 e1       	ldi	r30, 0x10	; 16
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	de 01       	movw	r26, r28
 112:	51 96       	adiw	r26, 0x11	; 17
 114:	01 90       	ld	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	8a 95       	dec	r24
 11a:	e1 f7       	brne	.-8      	; 0x114 <test1+0x30>
	
	while(1){
		
		for(int i = 0;i <8; i++){
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	2d c0       	rjmp	.+90     	; 0x17c <test1+0x98>
			
			if(realnum[i] == SW_P){		// 0,1,2,3,4,5
 122:	fa 01       	movw	r30, r20
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	8c 0f       	add	r24, r28
 12e:	9d 1f       	adc	r25, r29
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	20 89       	ldd	r18, Z+16	; 0x10
 136:	31 89       	ldd	r19, Z+17	; 0x11
 138:	83 b3       	in	r24, 0x13	; 19
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	d9 f4       	brne	.+54     	; 0x178 <test1+0x94>
				FND_P = FND_NUM[i];
 142:	fa 01       	movw	r30, r20
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	8c 0f       	add	r24, r28
 14e:	9d 1f       	adc	r25, r29
 150:	e8 0f       	add	r30, r24
 152:	f9 1f       	adc	r31, r25
 154:	80 81       	ld	r24, Z
 156:	88 bb       	out	0x18, r24	; 24
				
				LED_P = 0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	83 b9       	out	0x03, r24	; 3
				for(int j = 0; j< i; j++){
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	08 c0       	rjmp	.+16     	; 0x172 <test1+0x8e>
					LED_P = LED_P << 1;
 162:	83 b1       	in	r24, 0x03	; 3
 164:	88 0f       	add	r24, r24
 166:	83 b9       	out	0x03, r24	; 3
					LED_P += 1;
 168:	83 b1       	in	r24, 0x03	; 3
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	83 b9       	out	0x03, r24	; 3
			
			if(realnum[i] == SW_P){		// 0,1,2,3,4,5
				FND_P = FND_NUM[i];
				
				LED_P = 0x01;
				for(int j = 0; j< i; j++){
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	24 17       	cp	r18, r20
 174:	35 07       	cpc	r19, r21
 176:	ac f3       	brlt	.-22     	; 0x162 <test1+0x7e>
	int FND_NUM[8] = {0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F};
	int realnum[8] = {0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
	
	while(1){
		
		for(int i = 0;i <8; i++){
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	48 30       	cpi	r20, 0x08	; 8
 17e:	51 05       	cpc	r21, r1
 180:	84 f2       	brlt	.-96     	; 0x122 <test1+0x3e>
 182:	cc cf       	rjmp	.-104    	; 0x11c <test1+0x38>

00000184 <main>:
	}
}*/
	
int main(void)
{
	n=0;
 184:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <n+0x1>
 188:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <n>
	LED_D = 0xff;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	82 b9       	out	0x02, r24	; 2
	FND_D = 0xff;
 190:	87 bb       	out	0x17, r24	; 23
	BUZZ_D = 0xff;
 192:	81 bb       	out	0x11, r24	; 17
	SW_D = 0x00;
 194:	14 ba       	out	0x14, r1	; 20
	
	LED_P = 0x00;
 196:	13 b8       	out	0x03, r1	; 3
	FND_P = 0x00;
 198:	18 ba       	out	0x18, r1	; 24
	BUZZ_P = 0xff;
 19a:	82 bb       	out	0x12, r24	; 18
	
	sei();
 19c:	78 94       	sei
	USART_Init();
 19e:	96 d0       	rcall	.+300    	; 0x2cc <USART_Init>
	
	Init_ADC();
 1a0:	93 df       	rcall	.-218    	; 0xc8 <Init_ADC>

	TXT_LCD_Init();
 1a2:	66 d0       	rcall	.+204    	; 0x270 <TXT_LCD_Init>
 1a4:	9f df       	rcall	.-194    	; 0xe4 <test1>

000001a6 <TXT_LCD_Enable>:
	
	test1();
 1a6:	8b b3       	in	r24, 0x1b	; 27
 1a8:	8b 7f       	andi	r24, 0xFB	; 251


//- LCD 모듈 활성/비활성 구현 ------------------------------------------------------------------------
void TXT_LCD_Enable(void)
{
	TLCD_PORT &=  ~(1<<EN_BIT);   //- LOW - Disable
 1aa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <TXT_LCD_Enable+0x8>
 1b2:	00 00       	nop
	_delay_us(1);
	
	TLCD_PORT |=  (1<<EN_BIT);	  //- HIGH - Enable
 1b4:	8b b3       	in	r24, 0x1b	; 27
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	95 e0       	ldi	r25, 0x05	; 5
 1bc:	9a 95       	dec	r25
 1be:	f1 f7       	brne	.-4      	; 0x1bc <TXT_LCD_Enable+0x16>
 1c0:	00 00       	nop
	_delay_us(1);

	TLCD_PORT &=  ~(1<<EN_BIT);    //- LOW - Disable
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	8b bb       	out	0x1b, r24	; 27
 1c8:	8f e8       	ldi	r24, 0x8F	; 143
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <TXT_LCD_Enable+0x26>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <TXT_LCD_Enable+0x2c>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <TXT_LCD_Write>:

//- LCD 명령어/데이터 레지스터 기록 구현 ---------------------------------------------------------------
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	9f 70       	andi	r25, 0x0F	; 15
 1da:	9b bb       	out	0x1b, r25	; 27

	for (int nIdx = 0; nIdx < 4; nIdx++)
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	17 c0       	rjmp	.+46     	; 0x210 <TXT_LCD_Write+0x3a>
	{
		nTmp = (nValue>>nIdx) & 0x01;
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	04 2e       	mov	r0, r20
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <TXT_LCD_Write+0x18>
 1ea:	35 95       	asr	r19
 1ec:	27 95       	ror	r18
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <TXT_LCD_Write+0x14>
 1f2:	21 70       	andi	r18, 0x01	; 1
 1f4:	33 27       	eor	r19, r19
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
 1f6:	9b b3       	in	r25, 0x1b	; 27
 1f8:	ba 01       	movw	r22, r20
 1fa:	6c 5f       	subi	r22, 0xFC	; 252
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <TXT_LCD_Write+0x2e>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <TXT_LCD_Write+0x2a>
 208:	29 2b       	or	r18, r25
 20a:	2b bb       	out	0x1b, r18	; 27
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));

	for (int nIdx = 0; nIdx < 4; nIdx++)
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	44 30       	cpi	r20, 0x04	; 4
 212:	51 05       	cpc	r21, r1
 214:	34 f3       	brlt	.-52     	; 0x1e2 <TXT_LCD_Write+0xc>
	{
		nTmp = (nValue>>nIdx) & 0x01;
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
	}
	TXT_LCD_Enable();
 216:	c7 cf       	rjmp	.-114    	; 0x1a6 <TXT_LCD_Enable>
 218:	08 95       	ret

0000021a <Set4BitMode>:

//- TXT_LCD 4bit 인터페이스 설정 구현 ---------------------------------------------
void Set4BitMode(void)
{
	//- Command 전송을 위한 RS=0, RW=0, EN=0
	TLCD_PORT &= ~((1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 21a:	8b b3       	in	r24, 0x1b	; 27
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	8b bb       	out	0x1b, r24	; 27

	TXT_LCD_Write(CMD_8BIT_MODE);
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	d9 df       	rcall	.-78     	; 0x1d6 <TXT_LCD_Write>
 224:	8f e4       	ldi	r24, 0x4F	; 79
 226:	96 e4       	ldi	r25, 0x46	; 70
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <Set4BitMode+0xe>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <Set4BitMode+0x14>
 22e:	00 00       	nop
	_delay_us(4500);

	TXT_LCD_Write(CMD_8BIT_MODE);
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	d1 df       	rcall	.-94     	; 0x1d6 <TXT_LCD_Write>
 234:	8f e4       	ldi	r24, 0x4F	; 79
 236:	96 e4       	ldi	r25, 0x46	; 70
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <Set4BitMode+0x1e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <Set4BitMode+0x24>
	_delay_us(4500);
	
	TXT_LCD_Write(CMD_8BIT_MODE);
 23e:	00 00       	nop
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	c9 df       	rcall	.-110    	; 0x1d6 <TXT_LCD_Write>
 244:	87 e5       	ldi	r24, 0x57	; 87
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <Set4BitMode+0x2e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <Set4BitMode+0x34>
	_delay_us(150);
	
	TXT_LCD_Write(CMD_4BIT_MODE);
 24e:	00 00       	nop
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	c1 cf       	rjmp	.-126    	; 0x1d6 <TXT_LCD_Write>
 254:	08 95       	ret

00000256 <SendCommand>:
}


//- RBG_LCD 명령어 전달 함수 구현 ------------------------------------------------------------------------
void SendCommand(unsigned char command)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	//- Command 전송을 위한  RS=0, RW=0, EN=0
	TLCD_PORT  &= ~( (1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	88 7f       	andi	r24, 0xF8	; 248
 25e:	8b bb       	out	0x1b, r24	; 27

	//- Data Bus에 CMD 쓰기
	TXT_LCD_Write(command>>4);
 260:	8c 2f       	mov	r24, r28
 262:	82 95       	swap	r24
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	b7 df       	rcall	.-146    	; 0x1d6 <TXT_LCD_Write>
	TXT_LCD_Write(command);
 268:	8c 2f       	mov	r24, r28
 26a:	b5 df       	rcall	.-150    	; 0x1d6 <TXT_LCD_Write>
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <TXT_LCD_Init>:
//- TXT LCD 초기화 함수 구현 -----------------------------------------------------
void TXT_LCD_Init(void)
{
	//------ (1) TXT_LCD_Init 제어 Port 설정 및 초기화
	//- TXT_LCD 제어 Pin Output 설정 및 초기화
	TLCD_DDR  = ALL_SET;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	8a bb       	out	0x1a, r24	; 26
	TLCD_PORT = ALL_CLEAR;
 274:	1b ba       	out	0x1b, r1	; 27
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	80 e7       	ldi	r24, 0x70	; 112
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <TXT_LCD_Init+0xc>
 284:	00 c0       	rjmp	.+0      	; 0x286 <TXT_LCD_Init+0x16>
 286:	00 00       	nop
	
	_delay_us(50000);

	//------ (2) TXT LCD 인터페이스 설정
	Set4BitMode();
 288:	c8 df       	rcall	.-112    	; 0x21a <Set4BitMode>
	
	//------ (3) TXT LCD 출력을 위한 설정
	//- LCD의 행, 열 , 글자 크기 설정
	SendCommand(CMD_FUNCTION_SET);
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	e4 df       	rcall	.-56     	; 0x256 <SendCommand>
 28e:	8f e3       	ldi	r24, 0x3F	; 63
 290:	9f e1       	ldi	r25, 0x1F	; 31
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <TXT_LCD_Init+0x22>
 296:	00 c0       	rjmp	.+0      	; 0x298 <TXT_LCD_Init+0x28>
	_delay_us(2000);
	
	//- 디스플레이, 커서, 문자 깜빡임 On/Off 설정
	SendCommand(CMD_DISPLAY_CONTROL);
 298:	00 00       	nop
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	dc df       	rcall	.-72     	; 0x256 <SendCommand>
 29e:	8f e3       	ldi	r24, 0x3F	; 63
 2a0:	9f e1       	ldi	r25, 0x1F	; 31
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <TXT_LCD_Init+0x32>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <TXT_LCD_Init+0x38>
	_delay_us(2000);
	
	//- 커서 이동 방향, 문자 디스플레이 이동 여부 설정
	SendCommand(CMD_ENTRYMODE_SET);
 2a8:	00 00       	nop
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	d4 df       	rcall	.-88     	; 0x256 <SendCommand>
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e1       	ldi	r25, 0x1F	; 31
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <TXT_LCD_Init+0x42>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <TXT_LCD_Init+0x48>
	_delay_us(2000);
	
	//- LCD 화면 지우고 커서는 1행 1열 위치, DDRAM AC=0
	SendCommand(CMD_CLEAR_DISPLAY);
 2b8:	00 00       	nop
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	cc df       	rcall	.-104    	; 0x256 <SendCommand>
 2be:	8f e3       	ldi	r24, 0x3F	; 63
 2c0:	9f e1       	ldi	r25, 0x1F	; 31
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <TXT_LCD_Init+0x52>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <TXT_LCD_Init+0x58>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <USART_Init>:


// == USART 초기화 함수 ============================================================================= */
void USART_Init()
{
	UBRR1H = (unsigned char) BAUD_RATE >> 8;				//- 전송 속도 설정
 2cc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char) BAUD_RATE;
 2d0:	83 e3       	ldi	r24, 0x33	; 51
 2d2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1B = (1<<RXCIE1) | (1<<TXEN1) | (1<<RXEN1);			//- 수신, 송신, 수신인터럽트 처리 기능 설정
 2d6:	88 e9       	ldi	r24, 0x98	; 152
 2d8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);						//- No Parity, 1 Stop Bit, 8 bit Data
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	sei();					//- 글로벌 인터럽트를 활성화
 2e2:	78 94       	sei
 2e4:	08 95       	ret

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
