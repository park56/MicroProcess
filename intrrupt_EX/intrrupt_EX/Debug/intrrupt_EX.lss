
intrrupt_EX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000881  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00000ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023f  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__vector_6>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	34 d0       	rcall	.+104    	; 0x112 <main>
  aa:	3a c0       	rjmp	.+116    	; 0x120 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z9init_EINTv>:
#define LED_DDR DDRB

int led_flag = 0;				// 어떠한 상태의 기준을 정하기 위해 사용

void init_EINT(){							// 원래 기본값이 0이기 때문에 활성화
	EICRB |= ((1<<ISC41) | (0<<ISC40));   // 인터럽트가 일어나는 기준 (4가지있는 그거) ( << 앞의 숫자가 기준)
  ae:	8a b7       	in	r24, 0x3a	; 58
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (0<<INT4);						// 인터럽트 허용
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	89 bf       	out	0x39, r24	; 57
  b8:	08 95       	ret

000000ba <_Z10init_EINT1v>:
}
void init_EINT1(){
	EICRB |= ((1<<ISC51) | (0<<ISC50));   // 인터럽트가 일어나는 기준 (4가지있는 그거) ( << 앞의 숫자가 기준)
  ba:	8a b7       	in	r24, 0x3a	; 58
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT5);						// 인터럽트 허용
  c0:	89 b7       	in	r24, 0x39	; 57
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	89 bf       	out	0x39, r24	; 57
  c6:	08 95       	ret

000000c8 <__vector_5>:
		LED_PORT = 0xff;
	}
	
}*/

ISR(INT4_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25

led_flag =1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
LED_PORT = 0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	88 bb       	out	0x18, r24	; 24
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_6>:

ISR(INT5_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
	led_flag =0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	LED_PORT = 0x00;
 106:	18 ba       	out	0x18, r1	; 24

}
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	LED_DDR = 0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
	LED_PORT = 0x00;
 116:	18 ba       	out	0x18, r1	; 24
	
	init_EINT();
 118:	ca df       	rcall	.-108    	; 0xae <_Z9init_EINTv>
	init_EINT1();
 11a:	cf df       	rcall	.-98     	; 0xba <_Z10init_EINT1v>
 11c:	78 94       	sei
	sei();				// 인터럽트를 활성화 
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0xc>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
