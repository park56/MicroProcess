
tcld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9a  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000960  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a1  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054c  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002d2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	62 d0       	rcall	.+196    	; 0x16e <main>
  aa:	0b c1       	rjmp	.+534    	; 0x2c2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:

unsigned char rxData;

void USART_Init(){

	UBRR1H = (unsigned char) BAUD_RATE >> 8;
  ae:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char) BAUD_RATE;
  b2:	83 e3       	ldi	r24, 0x33	; 51
  b4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	//UCSR1B = (1<<TXEN1);
	UCSR1B = (1<<RXCIE1) | (1<<TXEN1) | (1<<RXEN1);			 // 수신, 송신, 수신인터럽트 기능 설정
  b8:	88 e9       	ldi	r24, 0x98	; 152
  ba:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);						// no parity, 1 stop bit, 8 bit data
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  c4:	08 95       	ret

000000c6 <USART_Transmitter>:
}

void USART_Transmitter(unsigned char txData){

	while(!(UCSR1A & (1<<UDRE1)));		// 송신 버퍼가 빌때까지 대기
  c6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <USART_Transmitter>
	UDR1 = txData;					// 버퍼에 데이터 채우기
  ce:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  d2:	08 95       	ret

000000d4 <__vector_30>:
}

ISR(USART1_RX_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	
	// 수신 버퍼에서 읽어 온 데이터를 다시 송신
	if(UCSR1A & (1<<RXC1)){
  fa:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  fe:	88 23       	and	r24, r24
 100:	1c f5       	brge	.+70     	; 0x148 <__vector_30+0x74>
		rxData = UDR1;							// 수신버퍼 데이터를 변수에 저장
 102:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rxData>
		USART_Transmitter(rxData);				// rxData를PC로 전송
 10a:	dd df       	rcall	.-70     	; 0xc6 <USART_Transmitter>
		
		if(rxData != '\n') {
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rxData>
 110:	8a 30       	cpi	r24, 0x0A	; 10
			SendData(rxData);
 112:	d1 f0       	breq	.+52     	; 0x148 <__vector_30+0x74>
 114:	c6 d0       	rcall	.+396    	; 0x2a2 <SendData>
			endCount++;
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(endCount == 16){
 128:	40 97       	sbiw	r24, 0x10	; 16
				SendCommand(DDRAM_ADDR|0x40);
 12a:	11 f4       	brne	.+4      	; 0x130 <__vector_30+0x5c>
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	7e d0       	rcall	.+252    	; 0x22c <SendCommand>
			}
			if(endCount == 33){
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	81 97       	sbiw	r24, 0x21	; 33
				SendCommand(CMD_CLEAR_DISPLAY);
 13a:	31 f4       	brne	.+12     	; 0x148 <__vector_30+0x74>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	76 d0       	rcall	.+236    	; 0x22c <SendCommand>
				endCount = 0;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
	}
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0b be       	out	0x3b, r0	; 59
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:
int main(void)
{
	//SendText(DDRAM_ADDR | 0x00, "HELLO WORLD");			// 1행에 문자출력
	//SendText(DDRAM_ADDR | 0x40, "123456789");		// 2행에 문자 출력
	
	TXT_LCD_Init();				// LCD 제어 설정 및 초기화
 16e:	6b d0       	rcall	.+214    	; 0x246 <TXT_LCD_Init>
	
	LED_P = 0x00;
 170:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
	
	USART_Init();	
 174:	87 bb       	out	0x17, r24	; 23
 176:	9b df       	rcall	.-202    	; 0xae <USART_Init>
	sei();
 178:	78 94       	sei
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0xc>

0000017c <TXT_LCD_Enable>:


//- LCD 모듈 활성/비활성 구현 ------------------------------------------------------------------------
void TXT_LCD_Enable(void)
{
	TLCD_PORT &=  ~(1<<EN_BIT);   //- LOW - Disable
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <TXT_LCD_Enable+0x8>
 188:	00 00       	nop
	_delay_us(1);
	
	TLCD_PORT |=  (1<<EN_BIT);	  //- HIGH - Enable
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	95 e0       	ldi	r25, 0x05	; 5
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <TXT_LCD_Enable+0x16>
 196:	00 00       	nop
	_delay_us(1);

	TLCD_PORT &=  ~(1<<EN_BIT);    //- LOW - Disable
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <TXT_LCD_Enable+0x26>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <TXT_LCD_Enable+0x2c>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <TXT_LCD_Write>:

//- LCD 명령어/데이터 레지스터 기록 구현 ---------------------------------------------------------------
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));
 1ac:	9b b3       	in	r25, 0x1b	; 27
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	9b bb       	out	0x1b, r25	; 27

	for (int nIdx = 0; nIdx < 4; nIdx++)
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	17 c0       	rjmp	.+46     	; 0x1e6 <TXT_LCD_Write+0x3a>
	{
		nTmp = (nValue>>nIdx) & 0x01;
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	04 2e       	mov	r0, r20
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <TXT_LCD_Write+0x18>
 1c0:	35 95       	asr	r19
 1c2:	27 95       	ror	r18
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <TXT_LCD_Write+0x14>
 1c8:	21 70       	andi	r18, 0x01	; 1
 1ca:	33 27       	eor	r19, r19
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	ba 01       	movw	r22, r20
 1d0:	6c 5f       	subi	r22, 0xFC	; 252
 1d2:	7f 4f       	sbci	r23, 0xFF	; 255
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <TXT_LCD_Write+0x2e>
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <TXT_LCD_Write+0x2a>
 1de:	29 2b       	or	r18, r25
 1e0:	2b bb       	out	0x1b, r18	; 27
void TXT_LCD_Write(unsigned char nValue)
{
	int nTmp  =  0;
	TLCD_PORT &= ~((1<<DATA_D4)|(1<<DATA_D5)|(1<<DATA_D6)|(1<<DATA_D7));

	for (int nIdx = 0; nIdx < 4; nIdx++)
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	44 30       	cpi	r20, 0x04	; 4
 1e8:	51 05       	cpc	r21, r1
 1ea:	34 f3       	brlt	.-52     	; 0x1b8 <TXT_LCD_Write+0xc>
	{
		nTmp = (nValue>>nIdx) & 0x01;
		TLCD_PORT |=  ( nTmp << (DATA_D4+nIdx) );
	}
	TXT_LCD_Enable();
 1ec:	c7 cf       	rjmp	.-114    	; 0x17c <TXT_LCD_Enable>
 1ee:	08 95       	ret

000001f0 <Set4BitMode>:

//- TXT_LCD 4bit 인터페이스 설정 구현 ---------------------------------------------
void Set4BitMode(void)
{
	//- Command 전송을 위한 RS=0, RW=0, EN=0
	TLCD_PORT &= ~((1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 1f0:	8b b3       	in	r24, 0x1b	; 27
 1f2:	88 7f       	andi	r24, 0xF8	; 248
 1f4:	8b bb       	out	0x1b, r24	; 27

	TXT_LCD_Write(CMD_8BIT_MODE);
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	d9 df       	rcall	.-78     	; 0x1ac <TXT_LCD_Write>
 1fa:	8f e4       	ldi	r24, 0x4F	; 79
 1fc:	96 e4       	ldi	r25, 0x46	; 70
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <Set4BitMode+0xe>
 202:	00 c0       	rjmp	.+0      	; 0x204 <Set4BitMode+0x14>
 204:	00 00       	nop
	_delay_us(4500);

	TXT_LCD_Write(CMD_8BIT_MODE);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	d1 df       	rcall	.-94     	; 0x1ac <TXT_LCD_Write>
 20a:	8f e4       	ldi	r24, 0x4F	; 79
 20c:	96 e4       	ldi	r25, 0x46	; 70
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <Set4BitMode+0x1e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <Set4BitMode+0x24>
	_delay_us(4500);
	
	TXT_LCD_Write(CMD_8BIT_MODE);
 214:	00 00       	nop
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	c9 df       	rcall	.-110    	; 0x1ac <TXT_LCD_Write>
 21a:	87 e5       	ldi	r24, 0x57	; 87
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <Set4BitMode+0x2e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <Set4BitMode+0x34>
	_delay_us(150);
	
	TXT_LCD_Write(CMD_4BIT_MODE);
 224:	00 00       	nop
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	c1 cf       	rjmp	.-126    	; 0x1ac <TXT_LCD_Write>
 22a:	08 95       	ret

0000022c <SendCommand>:
}


//- RBG_LCD 명령어 전달 함수 구현 ------------------------------------------------------------------------
void SendCommand(unsigned char command)
{
 22c:	cf 93       	push	r28
 22e:	c8 2f       	mov	r28, r24
	//- Command 전송을 위한  RS=0, RW=0, EN=0
	TLCD_PORT  &= ~( (1<<RS_BIT)|(1<<RW_BIT)|(1<<EN_BIT));
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	8b bb       	out	0x1b, r24	; 27

	//- Data Bus에 CMD 쓰기
	TXT_LCD_Write(command>>4);
 236:	8c 2f       	mov	r24, r28
 238:	82 95       	swap	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	b7 df       	rcall	.-146    	; 0x1ac <TXT_LCD_Write>
	TXT_LCD_Write(command);
 23e:	8c 2f       	mov	r24, r28
 240:	b5 df       	rcall	.-150    	; 0x1ac <TXT_LCD_Write>
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <TXT_LCD_Init>:
//- TXT LCD 초기화 함수 구현 -----------------------------------------------------
void TXT_LCD_Init(void)
{
	//------ (1) TXT_LCD_Init 제어 Port 설정 및 초기화
	//- TXT_LCD 제어 Pin Output 설정 및 초기화
	TLCD_DDR  = ALL_SET;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	8a bb       	out	0x1a, r24	; 26
	TLCD_PORT = ALL_CLEAR;
 24a:	1b ba       	out	0x1b, r1	; 27
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <TXT_LCD_Init+0xc>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <TXT_LCD_Init+0x16>
 25c:	00 00       	nop
	
	_delay_us(50000);

	//------ (2) TXT LCD 인터페이스 설정
	Set4BitMode();
 25e:	c8 df       	rcall	.-112    	; 0x1f0 <Set4BitMode>
	
	//------ (3) TXT LCD 출력을 위한 설정
	//- LCD의 행, 열 , 글자 크기 설정
	SendCommand(CMD_FUNCTION_SET);
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	e4 df       	rcall	.-56     	; 0x22c <SendCommand>
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9f e1       	ldi	r25, 0x1F	; 31
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <TXT_LCD_Init+0x22>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <TXT_LCD_Init+0x28>
	_delay_us(2000);
	
	//- 디스플레이, 커서, 문자 깜빡임 On/Off 설정
	SendCommand(CMD_DISPLAY_CONTROL);
 26e:	00 00       	nop
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	dc df       	rcall	.-72     	; 0x22c <SendCommand>
 274:	8f e3       	ldi	r24, 0x3F	; 63
 276:	9f e1       	ldi	r25, 0x1F	; 31
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <TXT_LCD_Init+0x32>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <TXT_LCD_Init+0x38>
	_delay_us(2000);
	
	//- 커서 이동 방향, 문자 디스플레이 이동 여부 설정
	SendCommand(CMD_ENTRYMODE_SET);
 27e:	00 00       	nop
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	d4 df       	rcall	.-88     	; 0x22c <SendCommand>
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	9f e1       	ldi	r25, 0x1F	; 31
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <TXT_LCD_Init+0x42>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <TXT_LCD_Init+0x48>
	_delay_us(2000);
	
	//- LCD 화면 지우고 커서는 1행 1열 위치, DDRAM AC=0
	SendCommand(CMD_CLEAR_DISPLAY);
 28e:	00 00       	nop
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	cc df       	rcall	.-104    	; 0x22c <SendCommand>
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	9f e1       	ldi	r25, 0x1F	; 31
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <TXT_LCD_Init+0x52>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <TXT_LCD_Init+0x58>
 29e:	00 00       	nop
 2a0:	08 95       	ret

000002a2 <SendData>:
}


//- RBG_LCD 데이터 전달 함수 구현 ------------------------------------------------------------------------
void SendData(unsigned char data)
{
 2a2:	cf 93       	push	r28
 2a4:	c8 2f       	mov	r28, r24
	//- Data 전송을 위한  RS=1, RW=0, EN=0
	TLCD_PORT  |=   (1<<RS_BIT);
 2a6:	8b b3       	in	r24, 0x1b	; 27
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	8b bb       	out	0x1b, r24	; 27
	TLCD_PORT  &= ~((1<<RW_BIT) | (1<<EN_BIT));
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	89 7f       	andi	r24, 0xF9	; 249
 2b0:	8b bb       	out	0x1b, r24	; 27

	TXT_LCD_Write(data>>4);
 2b2:	8c 2f       	mov	r24, r28
 2b4:	82 95       	swap	r24
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	79 df       	rcall	.-270    	; 0x1ac <TXT_LCD_Write>
	TXT_LCD_Write(data);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	77 df       	rcall	.-274    	; 0x1ac <TXT_LCD_Write>
}
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
