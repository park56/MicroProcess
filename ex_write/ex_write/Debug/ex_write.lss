
ex_write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010e  0080010e  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd4  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f3  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	16 d0       	rcall	.+44     	; 0xf0 <main>
  c4:	87 c0       	rjmp	.+270    	; 0x1d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init_ADC>:

/* ADC 초기화 함수 구현 */
void Init_ADC()
{
	// ADC1 채널, AREF 기준 전압 및 채널을 선택
	  ADMUX  = (1<<REFS0) | (1<<MUX0); 
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	87 b9       	out	0x07, r24	; 7
	// 채널, 활성화, 프리스케일 설정
	 ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);    
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	08 95       	ret

000000d2 <CDS_StartADCConverter>:
/* ==ADC 변환 함수 구현 */
unsigned int CDS_StartADCConverter()
{
	unsigned int result;
	
	cli();									// ADC 변환중 인터럽트 금지
  d2:	f8 94       	cli
	
	ADCSRA |= (1<<ADSC);					// ADC 변환 시작
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF)));			// ADC 변환 완료 신호 대기
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <CDS_StartADCConverter+0x8>
	
	result = ADCL;							// 변환 결과 저장
  de:	24 b1       	in	r18, 0x04	; 4
	result |= ((ADCH & 0x03)<<8);	
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	83 70       	andi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	98 2f       	mov	r25, r24
  e8:	88 27       	eor	r24, r24
  ea:	82 2b       	or	r24, r18
	
	sei();									// 인터럽트 허용
  ec:	78 94       	sei
	
	return result;
}
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
	LED_DDR = 0xff;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	87 bb       	out	0x17, r24	; 23
	
    USART_Init();
  f4:	2a d0       	rcall	.+84     	; 0x14a <USART_Init>
    stdout = &device;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__iob+0x3>
  fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <__iob+0x2>
	
	Init_ADC();										// ADC 초기화
	
	while (1) 
    {	
		AdcResult = CDS_StartADCConverter();		// ADC 변환 실행
 102:	e2 df       	rcall	.-60     	; 0xc8 <Init_ADC>
 104:	e6 df       	rcall	.-52     	; 0xd2 <CDS_StartADCConverter>
		if(AdcResult >= sensor_Flag){
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	94 40       	sbci	r25, 0x04	; 4
 10a:	10 f0       	brcs	.+4      	; 0x110 <main+0x20>
			LED_PORT = 0x00;
 10c:	18 ba       	out	0x18, r1	; 24
 10e:	fa cf       	rjmp	.-12     	; 0x104 <main+0x14>
		}else{
			LED_PORT = 0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	88 bb       	out	0x18, r24	; 24
 114:	f7 cf       	rjmp	.-18     	; 0x104 <main+0x14>

00000116 <USART1_putchar>:
// 표준입력 함수 ---------------------------------------
int USART1_getchar(FILE *stream)
{
	while(!(UCSR1A & (1<<RXC1))) ;
	return UDR1;
}
 116:	8a 30       	cpi	r24, 0x0A	; 10
 118:	79 f4       	brne	.+30     	; 0x138 <USART1_putchar+0x22>
 11a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 11e:	85 ff       	sbrs	r24, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <USART1_putchar+0x4>
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 128:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 12c:	85 ff       	sbrs	r24, 5
 12e:	fc cf       	rjmp	.-8      	; 0x128 <USART1_putchar+0x12>
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 136:	06 c0       	rjmp	.+12     	; 0x144 <USART1_putchar+0x2e>
 138:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <USART1_putchar+0x22>
 140:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <USART_Init>:


// == USART 초기화 함수 ============================================================================= */
void USART_Init()
{
	UBRR1H = (unsigned char) BAUD_RATE >> 8;				//- 전송 속도 설정
 14a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char) BAUD_RATE;
 14e:	83 e3       	ldi	r24, 0x33	; 51
 150:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1B = (1<<RXCIE1) | (1<<TXEN1) | (1<<RXEN1);			//- 수신, 송신, 수신인터럽트 처리 기능 설정
 154:	88 e9       	ldi	r24, 0x98	; 152
 156:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);						//- No Parity, 1 Stop Bit, 8 bit Data
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	sei();					//- 글로벌 인터럽트를 활성화
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <USART_Transmitter>:
}

// == USART Transmitter 함수 ==========================================================================
void USART_Transmitter(unsigned char txData)
{
	while(!(UCSR1A & (1<<UDRE1))) ;						//- 송신 버퍼가 빌 때까지 대기
 164:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 168:	95 ff       	sbrs	r25, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <USART_Transmitter>
	UDR1 = txData;										//- 버퍼에 데이터를 채우기
 16c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 170:	08 95       	ret

00000172 <__vector_30>:
}

// == USART Interrupt 함수 ============================================================================ */
ISR(USART1_RX_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	0b b6       	in	r0, 0x3b	; 59
 17e:	0f 92       	push	r0
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	//- 수신 버퍼에서 읽어 온 데이터를 다시 송신
	if(UCSR1A & (1<<RXC1))
 198:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 19c:	88 23       	and	r24, r24
 19e:	3c f4       	brge	.+14     	; 0x1ae <__vector_30+0x3c>
	{
		rxData = UDR1;
 1a0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		USART_Transmitter(rxData);
 1a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1ac:	db df       	rcall	.-74     	; 0x164 <USART_Transmitter>
	}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0b be       	out	0x3b, r0	; 59
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
